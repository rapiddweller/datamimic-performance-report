name: Datamimic Performance Reporting Tool CI/CD
run-name: ${{ github.actor || 'unknown' }} is running ${{ github.workflow || 'workflow' }} on ${{ github.repository || 'repo' }}
on:
  push:
    branches:
      - main
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches:
      - "*"

env:
  RUNTIME_ENVIRONMENT: production

jobs:
  setup:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Export latest tag
        run: |
          # Get the last tag and ensure it's a version number
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          if [[ ! $LATEST_TAG =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Warning: Latest tag $LATEST_TAG is not in version format (x.y.z), using 0.0.0"
            LATEST_TAG="0.0.0"
          fi
          echo "DATAMIMIC_PERF_LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          echo "DATAMIMIC_PERF_LATEST_TAG=$LATEST_TAG" >> build.env
          
      - name: Export lib version without patch
        run: |
          export LIB_VERSION_WITHOUT_PATCH=$(echo "$DATAMIMIC_PERF_LATEST_TAG" | sed 's/\.[^.]*$//')
          echo "LIB_VERSION_WITHOUT_PATCH=$LIB_VERSION_WITHOUT_PATCH" >> $GITHUB_ENV
          echo "LIB_VERSION_WITHOUT_PATCH=$LIB_VERSION_WITHOUT_PATCH" >> build.env
          
      - name: Upload build.env
        uses: actions/upload-artifact@v4
        with:
          name: setup
          path: build.env
          if-no-files-found: error
          retention-days: 1

  install_dependencies:
    runs-on: ubuntu-22.04
    container: python:3.11-slim-buster
    needs: setup
    permissions:
      contents: read
    steps:
      - name: Install dependencies os packages
        run: |
          apt-get update
          apt-get install -y build-essential git
          git config --global --add safe.directory $(realpath .)
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Cache python venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-python-${{ hashFiles('**/pyproject.toml') }}-v1
          restore-keys: |
            ${{ runner.os }}-python-
      - name: Check version
        run: |
          uv --version
        shell: bash
      - name: Create virtual env
        run: |
          uv venv .venv --python 3.11
          . .venv/bin/activate
      - name: Install dependencies
        run: |
          uv sync --all-extras
        shell: bash

  lint:
    runs-on: ubuntu-22.04
    needs: install_dependencies
    container: python:3.11-slim-buster
    steps:
      - name: Setup git
        run: |
          apt-get update
          apt-get install -y git
          git config --global --add safe.directory $(realpath .)
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - name: Load venv cache
        uses: actions/cache/restore@v4
        with:
          path: .venv
          key: ${{ runner.os }}-python-${{ hashFiles('**/pyproject.toml') }}
      - name: Run mypy
        run: |
          . .venv/bin/activate
          uv run mypy app
        shell: bash
      - name: Run ruff
        run: |
          . .venv/bin/activate
          uv run ruff check app
        shell: bash

  build:
    name: Build
    runs-on: ubuntu-22.04
    needs: [lint]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          ref: ${{ github.event.pull_request.head.ref || github.ref }}

      - name: Set Up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv Package Manager
        uses: astral-sh/setup-uv@v5

      - name: Install dependencies
        run: |
          uv sync
        shell: bash

      - name: Build Package
        run: |
          uv build
        shell: bash

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: dist/*

      - name: Cache build dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-build-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-build-

  unit_test:
    runs-on: ubuntu-22.04
    needs: install_dependencies
    timeout-minutes: 20
    container: python:3.11-slim-buster
    steps:
      - name: Setup git
        run: |
          apt-get update
          apt-get install -y git
          git config --global --add safe.directory $(realpath .)
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important for SonarQube to analyze all history
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - name: Load venv cache
        uses: actions/cache/restore@v4
        with:
          path: .venv
          key: ${{ runner.os }}-python-${{ hashFiles('**/pyproject.toml') }}-v1
          restore-keys: |
            ${{ runner.os }}-python-
      - name: Run unit tests with coverage
        run: |
          . .venv/bin/activate
          uv run pytest tests/ --cov=app --cov-report=xml:coverage.xml
        shell: bash
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

  sonarcloud_analysis:
    runs-on: ubuntu-22.04
    needs: [ unit_test ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage-reports

      - name: Fix coverage report paths
        run: |
          # Rename to match SonarCloud's pattern
          mv coverage-reports/coverage.xml coverage-reports/coverage-python.xml
          
          # Fix absolute paths in the coverage report
          sed -i 's|/__w/datamimic-performance-report/datamimic-performance-report/||g' coverage-reports/coverage-python.xml
          
          echo "Modified coverage report:"
          head -n 20 coverage-reports/coverage-python.xml

      - name: Run SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        with:
          args: >
            -Dsonar.projectKey=rapiddweller_datamimic-performance-report
            -Dsonar.organization=rapiddweller
            -Dsonar.python.coverage.reportPaths=coverage-reports/coverage-*.xml
            -Dsonar.python.version=3.11
            -Dsonar.sources=app
            -Dsonar.tests=tests
            -Dsonar.cpd.exclusions=tests/**
            -Dsonar.coverage.exclusions=tests/**
            -Dsonar.sourceEncoding=UTF-8

  publish_dev:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-22.04
    needs: [ unit_test, build ]
    environment:
      name: testpypi
      url: https://test.pypi.org/p/datamimic-perf
    permissions:
      id-token: write # Mandatory for trusted publishing
      contents: read
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Prepare Distribution Files
        run: |
          mkdir -p dist_files
          if [ -d "dist/build-artifact" ] && [ "$(ls -A dist/build-artifact)" ]; then
            mv dist/build-artifact/*.whl dist_files/ || echo "No wheel files found"
            mv dist/build-artifact/*.tar.gz dist_files/ || echo "No tar.gz files found"
          else
            echo "Error: Expected artifact directory not found or empty"
            ls -la dist/  # Debug: show what's in the dist directory
            exit 1
          fi
          rm -rf dist
          mv dist_files dist

      - name: List Distribution Files
        run: ls -la dist

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/
          verbose: true
          skip-existing: true

  release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-22.04
    needs: [ unit_test, build ]
    environment:
      name: pypi
      url: https://pypi.org/p/datamimic-perf
    permissions:
      id-token: write # Mandatory for trusted publishing
      contents: read
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Prepare Distribution Files
        run: |
          mkdir -p dist_files
          if [ -d "dist/build-artifact" ] && [ "$(ls -A dist/build-artifact)" ]; then
            mv dist/build-artifact/*.whl dist_files/ || echo "No wheel files found"
            mv dist/build-artifact/*.tar.gz dist_files/ || echo "No tar.gz files found"
          else
            echo "Error: Expected artifact directory not found or empty"
            ls -la dist/  # Debug: show what's in the dist directory
            exit 1
          fi
          rm -rf dist
          mv dist_files dist

      - name: List Distribution Files
        run: ls -la dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1 
